Lesson 5

--PostgreSQL

1. Запрос, который выберет категории и среднюю цену товаров в каждой категории, при условии, что эта средняя цена менее 1000 рублей (выбираем "бюджетные" категории товаров)

 Сначала посмотрим средние цены в категориях:

sql> SELECT CAST(AVG(price) AS NUMERIC(7,2)) AS average_price,
COUNT(cats.id) AS number_of_books,cats.name FROM cats
INNER JOIN products
ON cats.id = products.cat_id
GROUP BY  cats.name
[2018-06-01 15:12:03] 5 rows retrieved starting from 1 in 38ms (execution: 7ms, fetching: 31ms)

average_price | number_of_books | name
977.40	        5	              История
136.67	        3	              Медицинская литература
349.67	        3	              Детективы
1217.40	        5	              Научная литература
1440.57	        7	              На иностранных языках

 Выберем категории со средней ценой меньше 1000

 sql> SELECT CAST(AVG(price) AS NUMERIC(7,2)) AS average_price,
COUNT(cats.id) AS number_of_books,cats.name FROM cats
INNER JOIN products
ON cats.id = products.cat_id
GROUP BY  cats.name
HAVING  AVG(price) < 1000
[2018-06-01 15:19:21] 3 rows retrieved starting from 1 in 47ms (execution: 31ms, fetching: 16ms)

349.67	3	Детективы
977.40	5	История
136.67	3	Медицинская литература

2.   "Улучшите предыдущий запрос таким образом, чтобы в расчет средней цены включались только товары, имеющиеся на складе."

sql> SELECT CAST(AVG(price) AS NUMERIC(7,2)) AS average_price,
COUNT(cats.id) AS number_of_books,cats.name FROM cats
INNER JOIN products
ON cats.id = products.cat_id
WHERE products.quantity > 0
GROUP BY  cats.name
HAVING  AVG(price) < 1000
[2018-06-04 09:08:41] 3 rows retrieved starting from 1 in 49ms (execution: 25ms, fetching: 24ms)

349.67	3	Детективы
977.40	5	История
136.67	3	Медицинская литература    -- Результат ничем не отличаеся от предыдущего, что не удивительно, поскольку в таблице products нет   нулевых значений для quantity. Попробуем  в расчет средней цены включить только книги, имеющиеся на складе в количестве больше 1000:


ql> SELECT CAST(AVG(price) AS NUMERIC(7,2)) AS average_price,
COUNT(cats.id) AS number_of_books,cats.name FROM cats
INNER JOIN products
ON cats.id = products.cat_id
WHERE products.quantity > 1000
GROUP BY  cats.name
HAVING  AVG(price) < 1000
[2018-06-04 09:17:59] 4 rows retrieved starting from 1 in 28ms (execution: 18ms, fetching: 10ms)

173.00	1	Медицинская литература
349.67	3	Детективы
757.67	3	Научная литература
768.67	3	На иностранных языках


3. Добавьте к таблице брендов класс бренда (A, B, C). Например, A - Apple, B - Samsung, C - Xiaomi. Напишите запрос, 
который для каждой категории и класса брендов, представленных в категории выберет среднюю цену товаров.

sql> ALTER TABLE publishers ADD COLUMN class CHAR(1)
[2018-06-04 13:04:29] completed in 410ms


sql> SELECT  c1.id,c1.name AS category, p1.class AS class,
  cast((SELECT AVG(pr2.price)
   FROM (products pr2
      JOIN  cats c2 ON  pr2.cat_id = c2.id)
         JOIN publishers p2  ON   p2.id = pr2.publisher_id
    WHERE c2.id = c1.id
    AND p2.class = p1.class
  ) AS NUMERIC(10,2)) AS avg_price
FROM (products pr1
 JOIN  cats c1 ON  pr1.cat_id = c1.id)
   JOIN publishers p1  ON   p1.id = pr1.publisher_id
  GROUP BY c1.id,p1.class
  ORDER BY c1.id,p1.class
[2018-06-07 09:23:04] 13 rows retrieved starting from 1 in 254ms (execution: 228ms, fetching: 26ms)


1	История	                A	1077.25
1	История                	B	578.00
1	История         	       C	1558.50
2	Научная литература	     B	1199.50
2	Научная литература	     C	11235.00
3	На иностранных языках  	A	514.60
3	На иностранных языках	  B	3755.50
3	На иностранных языках	  C	6916.00
4	Детективы              	A	349.67
4	Детективы           	   C	349.67
5	Медицинская литература 	A	173.00
5	Медицинская литература	 B	118.50
5	Медицинская литература	 C	458.00



Для проверки сделаем запрос:

sql> SELECT AVG(products.price),publishers.class
FROM ((products INNER JOIN cats ON products.cat_id = cats.id)
  INNER JOIN publishers ON publishers.id = products.publisher_id
)
WHERE cats.name = 'История'
GROUP BY publishers.class
[2018-06-05 16:02:42] 3 rows retrieved starting from 1 in 27ms (execution: 13ms, fetching: 14ms)

avg     class
1077.25	A
578	    B
1558.5 	C

4. Добавим к своей базе данных таблицу заказов. Простейший вариант - номер заказа, дата и время, ID товара.

sql> CREATE TABLE orders (
  id         SERIAL PRIMARY KEY,
  order_id INTEGER,
  date       TIMESTAMP(2),
  product_id INTEGER
)
[2018-06-05 09:50:31] completed in 602ms

sql> ALTER TABLE orders ADD FOREIGN KEY (product_id) REFERENCES products(id)
ON UPDATE CASCADE
ON DELETE RESTRICT
[2018-06-05 10:41:20] completed in 193ms

5. Напишите запрос, который выведет таблицу с полями "дата", "число заказов за дату", "сумма заказов за дату". Для этого вам придется самостоятельно найти информацию о функциях работы с датой и временем.

sql> SELECT  DISTINCT DATE(od1.date),
  (SELECT COUNT(DISTINCT od2.order_id) FROM orders od2
  WHERE DATE(od2.date) = DATE(od1.date)),
  (SELECT SUM(products.price)
   FROM orders od2
     INNER JOIN products ON od2.product_id = products.id
   WHERE DATE(od2.date) = DATE(od1.date)
  )
FROM orders od1
GROUP BY od1.date
[2018-06-07 11:04:28] 4 rows retrieved starting from 1 in 83ms (execution: 49ms, fetching: 34ms)

2018-01-10	 1	 468
2018-01-11 	2	 4119
2018-01-12 	3	 3633
2018-01-13	 3	 12649


6.* Улучшите этот запрос, введя группировку по признаку "дешевый товар", "средняя цена", "дорогой товар". Критерии отнесения товара к той или иной группе определите самостоятельно. В итоге должно получиться "дата", "группа по цене", "число заказов", "сумма заказов"


Для решения этой задачи я содал две новые таблицы myordrs и myproducts и наполнил их данными:

sql> SELECT id,date,product_id,order_id
FROM myorders
[2018-06-09 13:06:45] 15 rows retrieved starting from 1 in 93ms (execution: 41ms, fetching: 52ms)

id  date        product_id  order_id
1	2018-06-04	1	        1
2	2018-06-04	2	        1
3	2018-06-04	12	        1
4	2018-06-05	7	        2
5	2018-06-05	8	        2
6	2018-06-05	9	        3
7	2018-06-05	5	        3
8	2018-06-05	8	        3
9	2018-06-06	3	        4
10	2018-06-06	5	        4
11	2018-06-07	4	        5
12	2018-06-07	11	        6
13	2018-06-07	12	        6
14	2018-06-07	9	        7
15	2018-06-07	8	        8

sql> SELECT id,category,price
FROM myproducts
[2018-06-09 13:16:05] 12 rows retrieved starting from 1 in 15ms (execution: 0ms, fetching: 15ms)

12	4	29
10	3	430
7	3	560
5	2	4000
2	1	2000
3	1	250
11	4	780
4	2	21000
6	2	360
8	3	4500
1	1	1100
9	3	2500


Теперь делаем запрос:

sql> SELECT date,price_cat,  COUNT(*), SUM(price)
FROM (SELECT od1.date,
        CASE WHEN myproducts.price BETWEEN 500 AND 2000 THEN 'middle'
        WHEN myproducts.price > 2000 THEN  'expensive'
        ELSE  'cheap'
        END  AS price_cat,
        myproducts.price
      FROM myorders od1 INNER JOIN myproducts
      ON od1.product_id = myproducts.id
      ORDER BY date,price_cat) AS SUM
GROUP BY date,price_cat
[2018-06-09 13:27:00] 9 rows retrieved starting from 1 in 31ms (execution: 0ms, fetching: 31ms)

date        price_cat   count    sum
2018-06-04	cheap	    1	     29
2018-06-04	middle	    2	     3100
2018-06-05	expensive	4	     15500
2018-06-05	middle	    1	     560
2018-06-06	cheap	    1	     250
2018-06-06	expensive	1	     4000
2018-06-07	cheap	    1	     29
2018-06-07	expensive	3	     28000
2018-06-07	middle	    1	     780

Проверяем:

sql> SELECT myorders.date,myorders.id,myproducts.id, myproducts.price
FROM myorders INNER JOIN myproducts ON myorders.product_id = myproducts.id
[2018-06-09 13:32:27] 15 rows retrieved starting from 1 in 47ms (execution: 31ms, fetching: 16ms)

date       id   id  price
2018-06-04	1	1	1100
2018-06-04	2	2	2000
2018-06-04	3	12	29
2018-06-05	4	7	560
2018-06-05	5	8	4500
2018-06-05	6	9	2500
2018-06-05	7	5	4000
2018-06-05	8	8	4500
2018-06-06	9	3	250
2018-06-06	10	5	4000
2018-06-07	11	4	21000
2018-06-07	12	11	780
2018-06-07	13	12	29
2018-06-07	14	9	2500
2018-06-07	15	8	4500

На 2018-06-07  имеем 1 заказанный продукт ценой 29            cheap       sum=29
                     3 зак. прод.  ценой 21000, 2500, 4500    expensive   sum=28000
                     1 зак. прод.  ценой 780                  middle      sum=780




